
#include "math.h"
#include "stdio.h"
#include "winbgi2.h"
#include "stdlib.h"
#include "gauss.h"
void HilbertMatrix(int N, double **H);
void displayMatrix(int N, double **H);
void computeVec(int N, double **H, double *b);
void plotVec(int N, double *b);
void rozwiazanie(int N,double *x);
void main()
{
	int N;
	scanf("%d",&N);
	double *b,*x;
	//alokacja pamieci dla tablic wykorzystywanych w programie
	double **H=(double**)malloc(N*sizeof(double*));
	b=(double*)malloc(N*sizeof(double));
	x=(double*)malloc(N*sizeof(double));
	for(int i=0;i<N;i++)
	{
		H[i]=(double*)malloc(N*sizeof(double));
	}
	HilbertMatrix(N,H);
	displayMatrix(N,H);
	computeVec(N,H,b);
	printf("\n\n");
	plotVec(N,b);
	gauss(N,H,x,b);
	printf("\n\n");
	rozwiazanie(N,x);
	wait();
}
//funkcja wypelnia odpowiednio macierz H
void HilbertMatrix(int N, double **H)
{
	for(int i=0;i<N;i++)
	{
		for(int j=0;j<N;j++)
		{
			H[i][j]=1.0/(1.0+i+j);
		}
	}
}
//funkcja wyswietla macierz H
void displayMatrix(int N, double **H)
{
	for(int i=0;i<N;i++)
	{
		for(int j=0;j<N;j++)
		{
			printf("%lf   ",H[i][j]);
		}
		printf("\n");
	}
}
//funkcja wypelnia odpowiednio wektor b
void computeVec(int N, double **H, double *b)
{
	for(int i=0;i<N;i++)
	{
		b[i]=0;
		for(int j=0;j<N;j++)
		{
			b[i]+=H[i][j];
		}
	}
}
//funkcja wyswietla macierz b
void plotVec(int N, double *b)
{
	for(int i=0;i<N;i++)
	{
		printf("%lf\n",b[i]);
	}
}
//funkcja wyswietla wyniki obliczone metod¹ eliminacji Gaussa
void rozwiazanie(int N,double *x)
{
	for(int i=0;i<N;i++)
	{
		printf("%lf\n",x[i]);
	}

}